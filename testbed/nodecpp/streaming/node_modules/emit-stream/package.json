{
  "_args": [
    [
      {
        "raw": "emit-stream@^0.1.2",
        "scope": null,
        "escapedName": "emit-stream",
        "name": "emit-stream",
        "rawSpec": "^0.1.2",
        "spec": ">=0.1.2 <0.2.0",
        "type": "range"
      },
      "c:\\Dev\\nodejsaddonsamples\\testbed\\nodecpp\\streaming\\node_modules\\streaming-worker"
    ]
  ],
  "_from": "emit-stream@>=0.1.2 <0.2.0",
  "_id": "emit-stream@0.1.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/emit-stream",
  "_npmUser": {
    "name": "substack",
    "email": "mail@substack.net"
  },
  "_npmVersion": "1.2.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "emit-stream@^0.1.2",
    "scope": null,
    "escapedName": "emit-stream",
    "name": "emit-stream",
    "rawSpec": "^0.1.2",
    "spec": ">=0.1.2 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/streaming-worker"
  ],
  "_resolved": "https://registry.npmjs.org/emit-stream/-/emit-stream-0.1.2.tgz",
  "_shasum": "0e205508a0d0d6d334607842f7c4769dbfbf16e8",
  "_shrinkwrap": null,
  "_spec": "emit-stream@^0.1.2",
  "_where": "c:\\Dev\\nodejsaddonsamples\\testbed\\nodecpp\\streaming\\node_modules\\streaming-worker",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "bugs": {
    "url": "https://github.com/substack/emit-stream/issues"
  },
  "dependencies": {
    "through": "~2.3.4"
  },
  "description": "turn event emitters into streams and streams into event emitters",
  "devDependencies": {
    "JSONStream": "~0.6.4",
    "tap": "~0.4.2"
  },
  "directories": {
    "example": "example",
    "test": "test"
  },
  "dist": {
    "shasum": "0e205508a0d0d6d334607842f7c4769dbfbf16e8",
    "tarball": "https://registry.npmjs.org/emit-stream/-/emit-stream-0.1.2.tgz"
  },
  "homepage": "https://github.com/substack/emit-stream",
  "keywords": [
    "emit",
    "event",
    "emitter",
    "EventEmitter",
    "stream"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "substack",
      "email": "mail@substack.net"
    }
  ],
  "name": "emit-stream",
  "optionalDependencies": {},
  "readme": "# emit-stream\n\nturn event emitters into streams and streams into event emitters\n\n[![build status](https://secure.travis-ci.org/substack/emit-stream.png)](http://travis-ci.org/substack/emit-stream)\n\n![emit stream explained](http://substack.net/images/emit_stream.gif)\n\n# example\n\nwrite a server that streams an event emitter's events to clients:\n\n``` js\nvar emitStream = require('emit-stream');\nvar JSONStream = require('JSONStream');\nvar net = require('net');\n\nvar server = (function () {\n    var ev = createEmitter();\n    \n    return net.createServer(function (stream) {\n        emitStream(ev)\n            .pipe(JSONStream.stringify())\n            .pipe(stream)\n        ;\n    });\n})();\nserver.listen(5555);\n\nvar EventEmitter = require('events').EventEmitter;\n\nfunction createEmitter () {\n    var ev = new EventEmitter;\n    setInterval(function () {\n        ev.emit('ping', Date.now());\n    }, 2000);\n    \n    var x = 0;\n    setInterval(function () {\n        ev.emit('x', x ++);\n    }, 500);\n    \n    return ev;\n}\n```\n\nthen re-constitute the event-emitters on the client:\n\n``` js\nvar emitStream = require('emit-stream');\nvar net = require('net');\n\nvar stream = net.connect(5555)\n    .pipe(JSONStream.parse([true]))\n;\nvar ev = emitStream(stream);\n\nev.on('ping', function (t) {\n    console.log('# ping: ' + t);\n});\n\nev.on('x', function (x) {\n    console.log('x = ' + x);\n});\n```\n\n***\n\n```\n$ node example/emit.js \nx = 0\nx = 1\nx = 2\nx = 3\n# ping: 1346116850523\nx = 4\nx = 5\n^C\n```\n\n# methods\n\n``` js\nvar emitStream = require('emit-stream')\n```\n\n## emitStream(x)\n\nIf `x` is a stream, returns an event emitter from `emit.toStream(x)`.\n\nOtherwise returns a stream from `emit.fromStream(x)`.\n\n## emitStream.toStream(emitter)\n\nReturn a stream from the EventEmitter `emitter`.\n\nThe `'data'` emitted by this stream will be array data.\nSerialization is up to you. I recommend\n[JSONStream](http://github.com/dominictarr/JSONStream)\nfor most purposes.\n\n## emitStream.fromStream(stream)\n\nReturn an EventEmitter from `stream`.\n\nThe `'data'` written to this stream should be an array, like\n[JSONStream](http://github.com/dominictarr/JSONStream) creates.\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install emit-stream\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/emit-stream.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "0.1.2"
}
